{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search.js","App.js","serviceWorker.js","index.js"],"names":["card","_ref","_ref$monster","monster","id","name","username","email","handeleDelete","react_default","a","createElement","className","src","concat","alt","onClick","CardList","monsters","map","components_card_card","key","search","placeholder","handleChange","type","onChange","App","state","searchField","fetchMonsters","_callee","res","data","regenerator_default","wrap","_context","prev","next","fetch","sent","json","_this","setState","stop","e","target","value","Object","toConsumableArray","prevState","arry","filter","el","console","log","this","_this$state","filteredMonstres","toLowerCase","includes","toLocaleLowerCase","search_box_search","card_list","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTAeeA,eAZF,SAAAC,GAAA,IAAAC,EAAAD,EAAGE,QAAWC,EAAdF,EAAcE,GAAIC,EAAlBH,EAAkBG,KAAMC,EAAxBJ,EAAwBI,SAAUC,EAAlCL,EAAkCK,MAASC,EAA3CP,EAA2CO,cAA3C,OACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BV,EAA1B,aAAyCQ,UAAU,GAAGG,IAAKX,IACnEK,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,SAAIJ,GACJE,EAAAC,EAAAC,cAAA,SAAIL,GACJG,EAAAC,EAAAC,cAAA,UAAQK,QAASR,GAAjB,aCGWS,EARE,SAAAhB,GAAA,IAAGiB,EAAHjB,EAAGiB,SAAUV,EAAbP,EAAaO,cAAb,OACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZM,EAASC,IAAI,SAAAhB,GAAO,OACnBM,EAAAC,EAAAC,cAACS,EAAD,CAAMC,IAAKlB,EAAQC,GAAID,QAASA,EAASK,cAAeA,QCK/Cc,EATA,SAAArB,GAAA,IAAGsB,EAAHtB,EAAGsB,YAAaC,EAAhBvB,EAAgBuB,aAAhB,OACbf,EAAAC,EAAAC,cAAA,SACEC,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,KCgDCG,6MAlDbC,MAAQ,CACNV,SAAU,GACVW,YAAa,MAOfC,mCAAgB,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAC,EAAAxB,EAAAyB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACIC,MAAM,8CADV,cACRP,EADQI,EAAAI,KAAAJ,EAAAE,KAAA,EAEKN,EAAIS,OAFT,OAERR,EAFQG,EAAAI,KAGdE,EAAKC,SAAS,CAAEzB,SAAUe,IAHZ,wBAAAG,EAAAQ,SAAAb,QAMhBP,aAAe,SAAAqB,GACbH,EAAKC,SAAS,CAAEd,YAAagB,EAAEC,OAAOC,WAGxCvC,cAAgB,SAACJ,EAAIyC,GACXG,OAAAC,EAAA,EAAAD,CAAON,EAAKd,MAAMV,SAASd,IACnCsC,EAAKC,SAAS,SAAAO,GAAS,MAAK,CACxBC,KAAMD,EAAUhC,SAASkC,OAAO,SAAAC,GAG9BC,QAAQC,IAAIV,EAAEC,OAAO1C,6FAnB3BoD,KAAK1B,iDAwBE,IAAA2B,EAC2BD,KAAK5B,MAA/BV,EADDuC,EACCvC,SAAUW,EADX4B,EACW5B,YAEZ6B,EAAmBxC,EAASkC,OAAO,SAAAjD,GAAO,OAC9CA,EAAQE,KAAKsD,cAAcC,SAAS/B,EAAYgC,uBAGlD,OACEpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACmD,EAAD,CACEvC,YAAY,kBACZC,aAAcgC,KAAKhC,eAErBf,EAAAC,EAAAC,cAACoD,EAAD,CAAU7C,SAAUwC,EAAmBlD,cAAegD,KAAKhD,wBA7CjDwD,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7294b24f.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css';\n\nconst card = ({ monster: { id, name, username, email }, handeleDelete }) => (\n  <div className=\"container-card\">\n    <img src={`https://robohash.org/${id}?set=set1`} className=\"\" alt={id} />\n    <h1>{name}</h1>\n    <p>{email}</p>\n    <p>{username}</p>\n    <button onClick={handeleDelete}>Delete</button>\n  </div>\n);\n\n\n\nexport default card;\n","import React from 'react';\nimport './card-list';\nimport Card from '../card/card';\n\nconst CardList = ({ monsters, handeleDelete }) => (\n  <div className=\"card-list\">\n    {monsters.map(monster => (\n      <Card key={monster.id} monster={monster} handeleDelete={handeleDelete} />\n    ))}\n  </div>\n);\n\nexport default CardList;\n","import React from 'react';\nimport './search';\n\nconst search = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n\nexport default search;\n","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list';\nimport Search from './components/search-box/search';\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchField: '',\n  };\n\n  componentDidMount() {\n    this.fetchMonsters();\n  }\n\n  fetchMonsters = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/users');\n    const data = await res.json();\n    this.setState({ monsters: data });\n  };\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n  \n  handeleDelete = (id, e) => {\n    let arry = [...this.state.monsters.id];\n    this.setState(prevState => ({\n        arry: prevState.monsters.filter(el => {\n          // el !== id\n          // console.log(el !== id)\n          console.log(e.target.id)\n        })\n    }));\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const filteredMonstres = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <Search\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonstres}  handeleDelete={this.handeleDelete}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}